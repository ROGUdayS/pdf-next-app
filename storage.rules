rules_version = '2';

service firebase.storage {
  match /b/{bucket}/o {
    // Allow CORS preflight requests
    match /{allPaths=**} {
      allow options: if request.headers.has('Origin');
    }

    // Profile photos rules
    match /profile-photos/{userId}/{allPaths=**} {
      allow read: if true;
      allow write: if request.auth != null 
                   && request.auth.uid == userId.split('_')[0]
                   && request.resource.size < 5 * 1024 * 1024
                   && request.resource.contentType.matches('image/.*');
    }

    // PDF files rules
    match /pdfs/{userId}/{allPaths=**} {
      // Allow read for all users (authenticated and non-authenticated)
      // This enables the new permission model where viewing is always allowed
      // but actions (download, save, etc.) are controlled in the application
      allow read: if true;
      
      // Allow create operations with size and type checks
      allow create: if request.auth != null && 
        request.auth.uid == userId &&
        (
          // For PDF files
          (request.resource.contentType == 'application/pdf' &&
           request.resource.size <= 100 * 1024 * 1024) ||
          // For thumbnails
          (request.resource.contentType.matches('image/.*') &&
           request.resource.size <= 2 * 1024 * 1024)
        );

      // Allow update operations with size and type checks
      allow update: if request.auth != null && 
        request.auth.uid == userId &&
        (
          // For PDF files
          (request.resource.contentType == 'application/pdf' &&
           request.resource.size <= 100 * 1024 * 1024) ||
          // For thumbnails
          (request.resource.contentType.matches('image/.*') &&
           request.resource.size <= 2 * 1024 * 1024)
        );

      // Allow delete operations if it's the user's directory
      allow delete: if request.auth != null && request.auth.uid == userId;
    }

    // Thumbnails rules
    match /pdfs/{userId}/thumbnails/{allPaths=**} {
      // Allow read for all users (authenticated and non-authenticated)
      // This enables the new permission model where viewing is always allowed
      allow read: if true;
      
      // Allow create operations with size and type checks
      allow create: if request.auth != null && 
        request.auth.uid == userId &&
        request.resource.contentType.matches('image/.*') &&
        request.resource.size <= 2 * 1024 * 1024;

      // Allow update operations with size and type checks
      allow update: if request.auth != null && 
        request.auth.uid == userId &&
        request.resource.contentType.matches('image/.*') &&
        request.resource.size <= 2 * 1024 * 1024;

      // Allow delete operations if it's the user's directory
      allow delete: if request.auth != null && request.auth.uid == userId;
    }
  }
} 