rules_version = '2';

service firebase.storage {
  match /b/{bucket}/o {
    // Allow CORS preflight requests
    match /{allPaths=**} {
      allow options: if request.headers.has('Origin');
    }

    // Profile photos rules
    match /profile-photos/{userId}/{allPaths=**} {
      allow read: if true;
      allow write: if request.auth != null 
                   && request.auth.uid == userId.split('_')[0]
                   && request.resource.size < 5 * 1024 * 1024
                   && request.resource.contentType.matches('image/.*');
    }

    // PDF files rules
    match /pdfs/{userId}/{allPaths=**} {
      // Allow read if user is authenticated and either:
      // 1. It's their directory
      // 2. They have access to the PDF (checked through Firestore)
      allow read: if request.auth != null && (
        request.auth.uid == userId ||
        exists(/databases/$(database)/documents/pdfs/$(resource.metadata.pdfId)) &&
        (
          get(/databases/$(database)/documents/pdfs/$(resource.metadata.pdfId)).data.accessUsers.hasAny([request.auth.token.email]) ||
          get(/databases/$(database)/documents/pdfs/$(resource.metadata.pdfId)).data.isPubliclyShared == true
        )
      );
      
      // Allow write (create, update, delete) if user is authenticated and it's their directory
      allow write, delete: if request.auth != null && request.auth.uid == userId;
      
      // Additional validation for file uploads
      allow create, update: if request.auth != null && 
        request.auth.uid == userId &&
        (
          // For PDF files
          (request.resource.contentType == 'application/pdf' &&
           request.resource.size <= 10 * 1024 * 1024) ||
          // For thumbnails
          (request.resource.contentType.matches('image/.*') &&
           request.resource.size <= 2 * 1024 * 1024)
        );
    }
  }
} 